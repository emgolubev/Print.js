/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("'use strict'\r\n\r\nvar browser = __webpack_require__(1)\r\n\r\nvar printTypes = ['pdf', 'html', 'raw', 'image', 'json']\r\n\r\nvar defaultParams = {\r\n  printable: null,\r\n  type: 'pdf',\r\n  header: null,\r\n  maxWidth: 800,\r\n  font: 'TimesNewRoman',\r\n  font_size: '12pt',\r\n  honorMarginPadding: true,\r\n  honorColor: false,\r\n  properties: null,\r\n  showModal: false,\r\n  modalMessage: 'Retrieving Document...',\r\n  frameId: 'printJS',\r\n  border: true,\r\n  htmlData: ''\r\n}\r\n\r\nvar printFriendlyElement, bodyStyle, headerStyle\r\n\r\nmodule.exports = function () {\r\n  // check if a printable document or object was supplied\r\n  if (arguments[0] === undefined) {\r\n    window.console.error('printJS expects at least 1 attribute.')\r\n    return false\r\n  }\r\n\r\n  // instantiate print object\r\n  var printJS = new PrintJS(arguments)\r\n\r\n  // print friendly defaults\r\n  printFriendlyElement = 'max-width: ' + printJS.params.maxWidth + 'px !important;' + printJS.params.font_size + ' !important;'\r\n  bodyStyle = 'font-family:' + printJS.params.font + ' !important; font-size: ' + printJS.params.font_size + ' !important; width:100%;'\r\n  headerStyle = 'font-weight:300;'\r\n\r\n  // check printable type\r\n  switch (printJS.params.type) {\r\n    case 'pdf':\r\n          // firefox doesn't support iframe pdf printing, we will just open the pdf file instead\r\n      if (browser.isFirefox()) {\r\n        console.log('PrintJS doesn\\'t support PDF printing in Firefox.')\r\n        var win = window.open(printJS.params.printable, '_blank')\r\n        win.focus()\r\n              // make sure there is no loading modal opened\r\n        if (printJS.params.showModal) printJS.disablePrintModal()\r\n      } else {\r\n        printJS.pdf()\r\n      }\r\n      break\r\n    case 'image':\r\n      printJS.image()\r\n      break\r\n    case 'html':\r\n      printJS.html()\r\n      break\r\n    case 'raw':\r\n      return printJS.rawHtml()\r\n      break\r\n    case 'json':\r\n      printJS.json()\r\n      break\r\n    default:\r\n          // throw invalid type error\r\n      throw new Error('Invalid print type. Available types are: pdf, html, raw, image and json.')\r\n  }\r\n}\r\n\r\n// printJS class\r\nvar PrintJS = function () {\r\n  var args = arguments[0]\r\n\r\n  var print = this\r\n\r\n  print.params = extend({}, defaultParams)\r\n\r\n  switch (typeof args[0]) {\r\n    case 'string':\r\n      print.params.printable = encodeURI(args[0])\r\n      print.params.type = args[1] || defaultParams.type\r\n      break\r\n\r\n    case 'object':\r\n      print.params.printable = args[0].printable\r\n      print.params.type = args[0].type || defaultParams.type\r\n      print.params.frameId = args[0].frameId || defaultParams.frameId\r\n      print.params.header = args[0].header || defaultParams.header\r\n      print.params.maxWidth = args[0].maxWidth || defaultParams.maxWidth\r\n      print.params.font = args[0].font || defaultParams.font\r\n      print.params.font_size = args[0].font_size || defaultParams.font_size\r\n      print.params.honorMarginPadding = (typeof args[0].honorMarginPadding !== 'undefined') ? args[0].honorMarginPadding : defaultParams.honorMarginPadding\r\n      print.params.properties = args[0].properties || defaultParams.properties\r\n      print.params.showModal = (typeof args[0].showModal !== 'undefined') ? args[0].showModal : defaultParams.showModal\r\n      print.params.modalMessage = args[0].modalMessage || defaultParams.modalMessage\r\n      break\r\n\r\n    default:\r\n      throw new Error('Unexpected argument type! Expected \"string\" or \"object\", got ' + typeof args[0])\r\n  }\r\n\r\n  // some validation\r\n  print.validateInput()\r\n\r\n  // check if showing feedback to user (useful for large files)\r\n  if (print.params.showModal) {\r\n    print.showModal()\r\n  }\r\n\r\n  // to prevent duplication and issues, remove print.printFrame from DOM, if it exists\r\n  var usedFrame = document.getElementById(print.params.frameId)\r\n\r\n  if (usedFrame) {\r\n    usedFrame.parentNode.removeChild(usedFrame)\r\n  }\r\n\r\n  // create a new iframe or embed element (IE prints blank pdf's if we use iframe)\r\n  if (browser.isIE() && print.params.type === 'pdf') {\r\n    // create embed element\r\n    print.printFrame = document.createElement('embed')\r\n    print.printFrame.setAttribute('type', 'application/pdf')\r\n\r\n    // hide embed\r\n    print.printFrame.setAttribute('style', 'width:0px;height:0px;')\r\n  } else {\r\n    // create iframe element\r\n    print.printFrame = document.createElement('iframe')\r\n\r\n    // hide iframe\r\n    print.printFrame.setAttribute('style', 'display:none;')\r\n  }\r\n\r\n  // set element id\r\n  print.printFrame.setAttribute('id', print.params.frameId)\r\n\r\n  // for non pdf printing, pass empty html document to srcdoc (force onload callback)\r\n  if (print.params.type !== 'pdf') print.printFrame.srcdoc = '<html><head></head><body></body></html>'\r\n}\r\n\r\nPrintJS.prototype.pdf = function () {\r\n  var print = this\r\n\r\n  // if showing feedback to user, pre load pdf files (hacky)\r\n  // since we will be using promises, we can't use this feature in IE\r\n  if (print.params.showModal && !browser.isIE()) {\r\n    var pdfObject = document.createElement('img')\r\n    pdfObject.src = print.params.printable\r\n\r\n    var pdf = new Promise(function (resolve, reject) {\r\n      var loadPDF = setInterval(checkPDFload, 100)\r\n\r\n      function checkPDFload () {\r\n        if (pdfObject.complete) {\r\n          window.clearInterval(loadPDF)\r\n          resolve('PrintJS: PDF loaded. Read to print.')\r\n        }\r\n      }\r\n    })\r\n\r\n    pdf.then(function (result) {\r\n      console.log(result)\r\n      // set iframe src with pdf document url\r\n      print.printFrame.setAttribute('src', print.params.printable)\r\n\r\n      // print pdf document\r\n      print.print()\r\n    })\r\n  } else {\r\n    // set iframe src with pdf document url\r\n    print.printFrame.setAttribute('src', print.params.printable)\r\n\r\n    // print pdf\r\n    print.print()\r\n  }\r\n}\r\n\r\nPrintJS.prototype.image = function () {\r\n  // create the image element\r\n  var img = document.createElement('img')\r\n  img.setAttribute('style', 'width:100%;')\r\n  img.setAttribute('id', 'printableImage')\r\n\r\n  // set image src with image file url\r\n  img.src = this.params.printable\r\n\r\n  // assign `this` to a variable, to be used within the promise, and functions\r\n  var self = this\r\n\r\n  // create wrapper\r\n  var printableElement = document.createElement('div')\r\n  printableElement.setAttribute('style', 'width:100%')\r\n\r\n  // to prevent firefox from not loading images within iframe, we can use base64-encoded data URL of images pixel data\r\n  // if (browser.isFirefox()) {\r\n  //   // let's make firefox happy\r\n  //   let canvas = document.createElement('canvas')\r\n  //   canvas.setAttribute('width', img.width)\r\n  //   canvas.setAttribute('height', img.height)\r\n  //   let context = canvas.getContext('2d')\r\n  //   context.drawImage(img, 0, 0)\r\n  //\r\n  //   // reset img src attribute with canvas dataURL\r\n  //   img.setAttribute('src', canvas.toDataURL('JPEG', 1.0))\r\n  // }\r\n\r\n  printableElement.appendChild(img)\r\n\r\n  // add header if any\r\n  if (self.params.header) {\r\n    self.addHeader(printableElement)\r\n  }\r\n\r\n  // store html data\r\n  self.params.htmlData = printableElement.outerHTML\r\n\r\n  // print image\r\n  self.print()\r\n}\r\n\r\nPrintJS.prototype.rawHtml = function () {\r\n  // get HTML printable element\r\n  var printElement = document.getElementById(this.params.printable)\r\n\r\n  // check if element exists\r\n  if (!printElement) {\r\n    window.console.error('Invalid HTML element id: ' + this.params.printable)\r\n\r\n    return false\r\n  }\r\n\r\n  // make a copy of the printElement to prevent DOM changes\r\n  var printableElement = document.createElement('div')\r\n  printableElement.appendChild(printElement.cloneNode(true))\r\n\r\n  // add cloned element to DOM, to have DOM element methods available. It will also be easier to colect styles\r\n  printableElement.setAttribute('style', 'display:none;')\r\n  printableElement.setAttribute('id', 'printJS-html')\r\n  printElement.parentNode.appendChild(printableElement)\r\n\r\n  // update printableElement variable with newly created DOM element\r\n  printableElement = document.getElementById('printJS-html')\r\n\r\n  // get main element styling\r\n  printableElement.setAttribute('style', this.collectStyles(printableElement) + 'margin:0 !important;')\r\n\r\n  // get all children elements\r\n  var elements = printableElement.children\r\n\r\n  // get styles for all children elements\r\n  this.loopNodesCollectStyles(elements)\r\n\r\n  // add header if any\r\n  if (this.params.header) {\r\n    this.addHeader(printableElement)\r\n  }\r\n\r\n  // remove DOM printableElement\r\n  printableElement.parentNode.removeChild(printableElement)\r\n\r\n  // store html data\r\n  this.params.htmlData = addWrapper(printableElement.innerHTML)\r\n\r\n  return this.params\r\n}\r\n\r\nPrintJS.prototype.html = function () {\r\n  if (this.rawHtml()) {\r\n    // print html element contents\r\n    this.print() \r\n  }\r\n}\r\n\r\nPrintJS.prototype.json = function () {\r\n   // check if we received proper data\r\n  if (typeof this.params.printable !== 'object') {\r\n    throw new Error('Invalid javascript data object (JSON).')\r\n  }\r\n\r\n  // check if properties were provided\r\n  if (!this.params.properties || typeof this.params.properties !== 'object') {\r\n    throw new Error('Invalid properties array for your JSON data.')\r\n  }\r\n\r\n  // variable to hold html string\r\n  var htmlData = ''\r\n\r\n  // check print has header\r\n  if (this.params.header) {\r\n    htmlData += '<h1 style=\"' + headerStyle + '\">' + this.params.header + '</h1>'\r\n  }\r\n\r\n  // function to build html templates for json data\r\n  htmlData += this.jsonToHTML()\r\n\r\n  // store html data\r\n  this.params.htmlData = addWrapper(htmlData)\r\n\r\n  // print json data\r\n  this.print()\r\n}\r\n\r\nPrintJS.prototype.print = function () {\r\n  var print = this\r\n\r\n  // append iframe element to document body\r\n  document.getElementsByTagName('body')[0].appendChild(print.printFrame)\r\n\r\n  // get iframe element\r\n  var printJS = document.getElementById(print.params.frameId)\r\n\r\n  // if printing pdf in IE\r\n  if (browser.isIE() && print.params.type === 'pdf') {\r\n    finishPrintPdfIe()\r\n  } else {\r\n    // wait for iframe to load all content\r\n    print.printFrame.onload = function () {\r\n      if (print.params.type === 'pdf') {\r\n        finishPrint()\r\n      } else {\r\n        // get iframe element document\r\n        var printDocument = (printJS.contentWindow || printJS.contentDocument)\r\n        if (printDocument.document) printDocument = printDocument.document\r\n\r\n        // inject printable html into iframe body\r\n        printDocument.body.innerHTML = print.params.htmlData\r\n\r\n        // wait for image to load inside iframe (chrome only)\r\n        if (print.params.type === 'image' && browser.isChrome()) {\r\n          printDocument.getElementById('printableImage').onload = function () {\r\n            finishPrint()\r\n          }\r\n        } else {\r\n          finishPrint()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function finishPrint () {\r\n    // print iframe document\r\n    printJS.focus()\r\n\r\n    // if IE or Edge, try catch with execCommand\r\n    if (browser.isIE() || browser.isEdge()) {\r\n      try {\r\n        printJS.contentWindow.document.execCommand('print', false, null)\r\n      } catch (e) {\r\n        printJS.contentWindow.print()\r\n      }\r\n    } else {\r\n      printJS.contentWindow.print()\r\n    }\r\n\r\n    // if showing feedback to user, close modal (printing / processing message)\r\n    if (print.params.showModal) {\r\n      print.disablePrintModal()\r\n    }\r\n  }\r\n\r\n  function finishPrintPdfIe () {\r\n    // wait until pdf is ready to print\r\n    if (typeof printJS.print === 'undefined') {\r\n      setTimeout(function () { finishPrintPdfIe() }, 1000)\r\n    } else {\r\n      printJS.print()\r\n\r\n      // remove embed (just because it isn't 100% hidden when using h/w = 0)\r\n      setTimeout(function () { printJS.parentNode.removeChild(printJS) }, 2000)\r\n    }\r\n  }\r\n}\r\n\r\nPrintJS.prototype.collectStyles = function (element) {\n  var this$1 = this;\n\r\n  var win = document.defaultView || window\r\n\r\n  var style = []\r\n\r\n  // string variable to hold styling for each element\r\n  var elementStyle = ''\r\n\r\n  if (win.getComputedStyle) { // modern browsers\r\n    style = win.getComputedStyle(element, '')\r\n\r\n    for (var i = 0; i < style.length; i++) {\r\n      // styles including\r\n      var targetStyles = ['border', 'float', 'box', 'font', 'line-height', 'text-align', 'fill']\r\n\r\n      // exact\r\n      var targetStyle = ['clear', 'display', 'width', 'min-width', 'height', 'min-height', 'max-height']\r\n\r\n      // optinal - include margin and padding\r\n      if (this$1.params.honorMarginPadding) {\r\n        targetStyle.push('margin', 'padding')\r\n      }\r\n\r\n      // optinal - include color\r\n      if (this$1.params.honorColor) {\r\n        targetStyle.push('color')\r\n      }\r\n\r\n      for (var s = 0; s < targetStyle.length; s++) {\r\n        if (style[i].indexOf(targetStyles[s]) !== -1 || style[i].indexOf(targetStyle[s]) === 0) {\r\n          elementStyle += style[i] + ':' + style.getPropertyValue(style[i]) + ';'\r\n        }\r\n      }\r\n    }\r\n    if (element && ['rect'].indexOf(element.tagName) === -1) {\r\n      elementStyle += 'color:#000000;-webkit-text-fill-color:#000000;'\r\n    } else if(element && elementStyle.indexOf('fill') === -1) {\r\n      elementStyle += 'fill:#000000;'\r\n    }\r\n  } else if (element.currentStyle) { // IE\r\n    style = element.currentStyle\r\n\r\n    for (var name in style) {\r\n      if (style.indexOf('border') !== -1 && style.indexOf('color') !== -1) {\r\n        elementStyle += name + ':' + style[name] + ';'\r\n      }\r\n    }\r\n  }\r\n\r\n  // add printer friendly\r\n  elementStyle += printFriendlyElement\r\n\r\n  return elementStyle\r\n}\r\n\r\nPrintJS.prototype.loopNodesCollectStyles = function (elements) {\n  var this$1 = this;\n\r\n  for (var n = 0; n < elements.length; n++) {\r\n    var currentElement = elements[n]\r\n\r\n    // Form Printing - check if is element Input\r\n    var tag = currentElement.tagName\r\n    if (tag === 'INPUT' || tag === 'TEXTAREA' || tag === 'SELECT') {\r\n      // save style to variable\r\n      var textStyle = this$1.collectStyles(currentElement)\r\n\r\n      // remove INPUT element and insert a text node\r\n      var parent = currentElement.parentNode\r\n\r\n      // get text value\r\n      var textNode = tag === 'SELECT'\r\n              ? document.createTextNode(currentElement.options[currentElement.selectedIndex].text)\r\n              : document.createTextNode(currentElement.value)\r\n\r\n      // create text element\r\n      var textElement = document.createElement('div')\r\n      textElement.appendChild(textNode)\r\n\r\n      // add style to text\r\n      textElement.setAttribute('style', textStyle)\r\n\r\n      // add text\r\n      parent.appendChild(textElement)\r\n\r\n      // remove input\r\n      parent.removeChild(currentElement)\r\n    } else {\r\n      // get all styling for print element\r\n      currentElement.setAttribute('style', this$1.collectStyles(currentElement))\r\n    }\r\n\r\n    currentElement.removeAttribute('id')\r\n\r\n    currentElement.removeAttribute('class')\r\n\r\n    // check if more elements in tree\r\n    var children = currentElement.children\r\n\r\n    if (children && children.length) {\r\n      this$1.loopNodesCollectStyles(children)\r\n    }\r\n  }\r\n}\r\n\r\nPrintJS.prototype.addHeader = function (printElement) {\r\n  // create header element\r\n  var headerElement = document.createElement('h1')\r\n\r\n  // create header text node\r\n  var headerNode = document.createTextNode(this.params.header)\r\n\r\n  // build and style\r\n  headerElement.appendChild(headerNode)\r\n  headerElement.setAttribute('style', headerStyle)\r\n\r\n  printElement.insertBefore(headerElement, printElement.childNodes[0])\r\n}\r\n\r\nPrintJS.prototype.jsonToHTML = function () {\n  var this$1 = this;\n\r\n  var data = this.params.printable\r\n  var properties = this.params.properties\r\n\r\n  var htmlData = '<div style=\"display:flex; flex-direction: column;\">'\r\n\r\n  // header\r\n  htmlData += '<div style=\"flex:1; display:flex;\">'\r\n\r\n  for (var a = 0; a < properties.length; a++) {\r\n    htmlData += '<div style=\"flex:1; padding:5px;\">' + capitalizePrint(properties[a]['displayName'] || properties[a]) + '</div>'\r\n  }\r\n\r\n  htmlData += '</div>'\r\n\r\n  // create html data\r\n  for (var i = 0; i < data.length; i++) {\r\n    htmlData += '<div style=\"flex:1; display:flex;'\r\n    htmlData += this$1.params.border ? 'border:1px solid lightgray;' : ''\r\n    htmlData += '\">'\r\n\r\n    for (var n = 0; n < properties.length; n++) {\r\n      htmlData += '<div style=\"flex:1; padding:5px;\">' + data[i][properties[n]['field'] || properties[n]] + '</div>'\r\n    }\r\n\r\n    htmlData += '</div>'\r\n  }\r\n\r\n  htmlData += '</div>'\r\n\r\n  return htmlData\r\n}\r\n\r\nPrintJS.prototype.validateInput = function () {\r\n  if (!this.params.printable) {\r\n    throw new Error('Missing printable information.')\r\n  }\r\n\r\n  if (!this.params.type || typeof this.params.type !== 'string' || printTypes.indexOf(this.params.type.toLowerCase()) === -1) {\r\n    throw new Error('Invalid print type. Available types are: pdf, html, image and json.')\r\n  }\r\n}\r\n\r\nPrintJS.prototype.showModal = function () {\r\n  // build modal\r\n  var modalStyle = 'font-family:sans-serif; ' +\r\n      'display:table; ' +\r\n      'text-align:center; ' +\r\n      'font-weight:300; ' +\r\n      'font-size:30px; ' +\r\n      'left:0; top:0;' +\r\n      'position:fixed; ' +\r\n      'z-index: 9990;' +\r\n      'color: #0460B5; ' +\r\n      'width: 100%; ' +\r\n      'height: 100%; ' +\r\n      'background-color:rgba(255,255,255,.9);' +\r\n      'transition: opacity .3s ease;'\r\n\r\n  // create wrapper\r\n  var printModal = document.createElement('div')\r\n  printModal.setAttribute('style', modalStyle)\r\n  printModal.setAttribute('id', 'printJS-Modal')\r\n\r\n  // create content div\r\n  var contentDiv = document.createElement('div')\r\n  contentDiv.setAttribute('style', 'display:table-cell; vertical-align:middle; padding-bottom:100px;')\r\n\r\n  // add close button (requires print.css)\r\n  var closeButton = document.createElement('div')\r\n  closeButton.setAttribute('class', 'printClose')\r\n  closeButton.setAttribute('id', 'printClose')\r\n  contentDiv.appendChild(closeButton)\r\n\r\n  // add spinner (requires print.css)\r\n  var spinner = document.createElement('span')\r\n  spinner.setAttribute('class', 'printSpinner')\r\n  contentDiv.appendChild(spinner)\r\n\r\n  // add message\r\n  var messageNode = document.createTextNode(this.params.modalMessage)\r\n  contentDiv.appendChild(messageNode)\r\n\r\n  // add contentDiv to printModal\r\n  printModal.appendChild(contentDiv)\r\n\r\n  // append print modal element to document body\r\n  document.getElementsByTagName('body')[0].appendChild(printModal)\r\n\r\n  // add event listener to close button\r\n  var print = this\r\n  document.getElementById('printClose').addEventListener('click', function () {\r\n    print.disablePrintModal()\r\n  })\r\n}\r\n\r\nPrintJS.prototype.disablePrintModal = function () {\r\n  var printFrame = document.getElementById('printJS-Modal')\r\n\r\n  printFrame.parentNode.removeChild(printFrame)\r\n}\r\n\r\nfunction addWrapper (htmlData) {\r\n  return '<div style=\"' + bodyStyle + '\">' + htmlData + '</div>'\r\n}\r\n\r\n// update default print.params with user input\r\nfunction extend (a, b) {\r\n  for (var key in b) {\r\n    if (b.hasOwnProperty(key)) {\r\n      a[key] = b[key]\r\n    }\r\n  }\r\n\r\n  return a\r\n}\r\n\r\n// capitalize string\r\nfunction capitalizePrint (string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

eval("// Firefox 1.0+\r\nmodule.exports = {\r\n  isFirefox: function () {\r\n    return typeof InstallTrigger !== 'undefined'\r\n  },\r\n\r\n  // Internet Explorer 6-11\r\n  isIE: function () {\r\n    return !!document.documentMode\r\n  },\r\n\r\n  // Edge 20+\r\n  isEdge: function () {\r\n    return !this.isIE() && !!window.StyleMedia\r\n  },\r\n\r\n  // Chrome 1+\r\n  isChrome: function () {\r\n    return !!window.chrome && !!window.chrome.webstore\r\n  }\r\n\r\n  // Opera 8.0+\r\n  // let isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0\r\n\r\n  // At least Safari 3+: \"[object HTMLElementConstructor]\"\r\n  // let isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvYnJvd3Nlci5qcz84M2I5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpcmVmb3ggMS4wK1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBpc0ZpcmVmb3g6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnXHJcbiAgfSxcclxuXHJcbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgNi0xMVxyXG4gIGlzSUU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhIWRvY3VtZW50LmRvY3VtZW50TW9kZVxyXG4gIH0sXHJcblxyXG4gIC8vIEVkZ2UgMjArXHJcbiAgaXNFZGdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuaXNJRSgpICYmICEhd2luZG93LlN0eWxlTWVkaWFcclxuICB9LFxyXG5cclxuICAvLyBDaHJvbWUgMStcclxuICBpc0Nocm9tZTogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICEhd2luZG93LmNocm9tZSAmJiAhIXdpbmRvdy5jaHJvbWUud2Vic3RvcmVcclxuICB9XHJcblxyXG4gIC8vIE9wZXJhIDguMCtcclxuICAvLyBsZXQgaXNPcGVyYSA9ICghIXdpbmRvdy5vcHIgJiYgISFvcHIuYWRkb25zKSB8fCAhIXdpbmRvdy5vcGVyYSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJyBPUFIvJykgPj0gMFxyXG5cclxuICAvLyBBdCBsZWFzdCBTYWZhcmkgMys6IFwiW29iamVjdCBIVE1MRWxlbWVudENvbnN0cnVjdG9yXVwiXHJcbiAgLy8gbGV0IGlzU2FmYXJpID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5IVE1MRWxlbWVudCkuaW5kZXhPZignQ29uc3RydWN0b3InKSA+IDBcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2Jyb3dzZXIuanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

eval("/*\r\n * Print.js\r\n * http://printjs.crabbly.com\r\n * Version: 1.0.14\r\n *\r\n * Copyright 2017 Rodrigo Vieira (@crabbly)\r\n * Released under the MIT license\r\n * https://github.com/crabbly/Print.js/blob/master/LICENSE\r\n */\r\n\r\nwindow.printJS = __webpack_require__(0)\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvcHJpbnQuanM/ZmEzMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBQcmludC5qc1xyXG4gKiBodHRwOi8vcHJpbnRqcy5jcmFiYmx5LmNvbVxyXG4gKiBWZXJzaW9uOiAxLjAuMTRcclxuICpcclxuICogQ29weXJpZ2h0IDIwMTcgUm9kcmlnbyBWaWVpcmEgKEBjcmFiYmx5KVxyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2NyYWJibHkvUHJpbnQuanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxyXG4gKi9cclxuXHJcbndpbmRvdy5wcmludEpTID0gcmVxdWlyZSgnLi9qcy9wcmludCcpXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcHJpbnQuanMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBVUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);